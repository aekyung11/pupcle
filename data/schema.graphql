"""All input for the `acceptFriendRequest` mutation."""
input AcceptFriendRequestInput {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  fromUserId: UUID!
}

"""The output of our `acceptFriendRequest` mutation."""
type AcceptFriendRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  fromUser: User!
}

"""All input for the `acceptInvitationToOrganization` mutation."""
input AcceptInvitationToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  code: String
  invitationId: UUID!
}

"""The output of our `acceptInvitationToOrganization` mutation."""
type AcceptInvitationToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The set of content types that we allow users to upload."""
enum AllowedUploadContentType {
  """image/apng"""
  IMAGE_APNG

  """image/bmp"""
  IMAGE_BMP

  """image/gif"""
  IMAGE_GIF

  """image/jpeg"""
  IMAGE_JPEG

  """image/png"""
  IMAGE_PNG

  """image/svg+xml"""
  IMAGE_SVG_XML

  """image/tiff"""
  IMAGE_TIFF

  """image/webp"""
  IMAGE_WEBP

  """video/mp4"""
  VIDEO_MP4

  """video/quicktime"""
  VIDEO_QUICKTIME
}

"""All input for the `changePassword` mutation."""
input ChangePasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  oldPassword: String!
}

"""The output of our `changePassword` mutation."""
type ChangePasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `confirmAccountDeletion` mutation."""
input ConfirmAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
}

"""The output of our `confirmAccountDeletion` mutation."""
type ConfirmAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the create `FriendRequest` mutation."""
input CreateFriendRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FriendRequest` to be created by this mutation."""
  friendRequest: FriendRequestInput!
}

"""The output of our create `FriendRequest` mutation."""
type CreateFriendRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FriendRequest` that was created by this mutation."""
  friendRequest: FriendRequest

  """An edge for our `FriendRequest`. May be used by Relay 1."""
  friendRequestEdge(
    """The method to use when ordering `FriendRequest`."""
    orderBy: [FriendRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendRequestsEdge

  """Reads a single `User` that is related to this `FriendRequest`."""
  fromUser: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `FriendRequest`."""
  toUser: User
}

"""All input for the `createOrganization` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
  slug: String!
}

"""The output of our `createOrganization` mutation."""
type CreateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Pet` mutation."""
input CreatePetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Pet` to be created by this mutation."""
  pet: PetInput!
}

"""The output of our create `Pet` mutation."""
type CreatePetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pet` that was created by this mutation."""
  pet: Pet

  """An edge for our `Pet`. May be used by Relay 1."""
  petEdge(
    """The method to use when ordering `Pet`."""
    orderBy: [PetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PetsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Pet`."""
  user: User
}

"""All input for the create `PoiReview` mutation."""
input CreatePoiReviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PoiReview` to be created by this mutation."""
  poiReview: PoiReviewInput!
}

"""The output of our create `PoiReview` mutation."""
type CreatePoiReviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Poi` that is related to this `PoiReview`."""
  poi: Poi

  """The `PoiReview` that was created by this mutation."""
  poiReview: PoiReview

  """An edge for our `PoiReview`. May be used by Relay 1."""
  poiReviewEdge(
    """The method to use when ordering `PoiReview`."""
    orderBy: [PoiReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PoiReviewsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PoiReview`."""
  user: User
}

"""All input for the create `PrivateDailyRecord` mutation."""
input CreatePrivateDailyRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PrivateDailyRecord` to be created by this mutation."""
  privateDailyRecord: PrivateDailyRecordInput!
}

"""The output of our create `PrivateDailyRecord` mutation."""
type CreatePrivateDailyRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Pet` that is related to this `PrivateDailyRecord`."""
  pet: Pet

  """The `PrivateDailyRecord` that was created by this mutation."""
  privateDailyRecord: PrivateDailyRecord

  """An edge for our `PrivateDailyRecord`. May be used by Relay 1."""
  privateDailyRecordEdge(
    """The method to use when ordering `PrivateDailyRecord`."""
    orderBy: [PrivateDailyRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PrivateDailyRecordsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PrivateDailyRecord`."""
  user: User
}

"""All input for the create `SharedDailyRecord` mutation."""
input CreateSharedDailyRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SharedDailyRecord` to be created by this mutation."""
  sharedDailyRecord: SharedDailyRecordInput!
}

"""The output of our create `SharedDailyRecord` mutation."""
type CreateSharedDailyRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Pet` that is related to this `SharedDailyRecord`."""
  pet: Pet

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SharedDailyRecord` that was created by this mutation."""
  sharedDailyRecord: SharedDailyRecord

  """An edge for our `SharedDailyRecord`. May be used by Relay 1."""
  sharedDailyRecordEdge(
    """The method to use when ordering `SharedDailyRecord`."""
    orderBy: [SharedDailyRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SharedDailyRecordsEdge

  """Reads a single `User` that is related to this `SharedDailyRecord`."""
  user: User
}

"""All input for the `createUploadUrl` mutation."""
input CreateUploadUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  You must provide the content type (or MIME type) of the content you intend
  to upload. For further information about content types, see
  https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types
  """
  contentType: AllowedUploadContentType!

  """Optional file name to set on the object."""
  fileName: String
}

"""The output of our `createUploadUrl` mutation."""
type CreateUploadUrlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Upload content to this signed URL."""
  uploadUrl: String!
}

"""All input for the create `UserEmail` mutation."""
input CreateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserEmail` to be created by this mutation."""
  userEmail: UserEmailInput!
}

"""The output of our create `UserEmail` mutation."""
type CreateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was created by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""A `UUID` edge in the connection."""
type CurrentUserSharedFriendIdEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A connection to a list of `UUID` values."""
type CurrentUserSharedFriendIdsConnection {
  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserSharedFriendIdEdge!]!

  """A list of `UUID` objects."""
  nodes: [UUID]!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

enum DailyRecordDayStatus {
  """all_bad"""
  ALL_BAD

  """all_good"""
  ALL_GOOD

  """mixed"""
  MIXED

  """none"""
  NONE
}

enum DailyRecordStatus {
  """bad"""
  BAD

  """good"""
  GOOD
}

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteFriendRequest` mutation."""
input DeleteFriendRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  fromUserId: UUID!
  toUserId: UUID!
}

"""The output of our delete `FriendRequest` mutation."""
type DeleteFriendRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFriendRequestNodeId: ID

  """The `FriendRequest` that was deleted by this mutation."""
  friendRequest: FriendRequest

  """An edge for our `FriendRequest`. May be used by Relay 1."""
  friendRequestEdge(
    """The method to use when ordering `FriendRequest`."""
    orderBy: [FriendRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendRequestsEdge

  """Reads a single `User` that is related to this `FriendRequest`."""
  fromUser: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `FriendRequest`."""
  toUser: User
}

"""All input for the `deleteOrganization` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
}

"""The output of our `deleteOrganization` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePet` mutation."""
input DeletePetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Pet` mutation."""
type DeletePetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPetNodeId: ID

  """The `Pet` that was deleted by this mutation."""
  pet: Pet

  """An edge for our `Pet`. May be used by Relay 1."""
  petEdge(
    """The method to use when ordering `Pet`."""
    orderBy: [PetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PetsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Pet`."""
  user: User
}

"""All input for the `deletePoiReview` mutation."""
input DeletePoiReviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `PoiReview` mutation."""
type DeletePoiReviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPoiReviewNodeId: ID

  """Reads a single `Poi` that is related to this `PoiReview`."""
  poi: Poi

  """The `PoiReview` that was deleted by this mutation."""
  poiReview: PoiReview

  """An edge for our `PoiReview`. May be used by Relay 1."""
  poiReviewEdge(
    """The method to use when ordering `PoiReview`."""
    orderBy: [PoiReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PoiReviewsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PoiReview`."""
  user: User
}

"""All input for the `deleteUserAuthentication` mutation."""
input DeleteUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserAuthentication` mutation."""
type DeleteUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserAuthenticationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User

  """The `UserAuthentication` that was deleted by this mutation."""
  userAuthentication: UserAuthentication
}

"""All input for the `deleteUserEdge` mutation."""
input DeleteUserEdgeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  fromUserId: UUID!
  toUserId: UUID!
}

"""The output of our delete `UserEdge` mutation."""
type DeleteUserEdgePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserEdgeNodeId: ID

  """Reads a single `User` that is related to this `UserEdge`."""
  fromUser: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEdge`."""
  toUser: User

  """The `UserEdge` that was deleted by this mutation."""
  userEdge: UserEdge

  """An edge for our `UserEdge`. May be used by Relay 1."""
  userEdgeEdge(
    """The method to use when ordering `UserEdge`."""
    orderBy: [UserEdgesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEdgesEdge
}

"""All input for the `deleteUserEmail` mutation."""
input DeleteUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserEmail` mutation."""
type DeleteUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserEmailNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was deleted by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""All input for the `forgotPassword` mutation."""
input ForgotPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `forgotPassword` mutation."""
type ForgotPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type FriendRequest {
  createdAt: Datetime!

  """Reads a single `User` that is related to this `FriendRequest`."""
  fromUser: User
  fromUserId: UUID!

  """Reads a single `User` that is related to this `FriendRequest`."""
  toUser: User
  toUserId: UUID!
  updatedAt: Datetime!
}

"""
A condition to be used against `FriendRequest` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FriendRequestCondition {
  """Checks for equality with the object’s `fromUserId` field."""
  fromUserId: UUID

  """Checks for equality with the object’s `toUserId` field."""
  toUserId: UUID
}

"""An input for mutations affecting `FriendRequest`"""
input FriendRequestInput {
  fromUserId: UUID!
  toUserId: UUID!
}

"""A connection to a list of `FriendRequest` values."""
type FriendRequestsConnection {
  """
  A list of edges which contains the `FriendRequest` and cursor to aid in pagination.
  """
  edges: [FriendRequestsEdge!]!

  """A list of `FriendRequest` objects."""
  nodes: [FriendRequest!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FriendRequest` you could get from the connection."""
  totalCount: Int!
}

"""A `FriendRequest` edge in the connection."""
type FriendRequestsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FriendRequest` at the end of the edge."""
  node: FriendRequest!
}

"""Methods to use when ordering `FriendRequest`."""
enum FriendRequestsOrderBy {
  FROM_USER_ID_ASC
  FROM_USER_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TO_USER_ID_ASC
  TO_USER_ID_DESC
}

"""All input for the `inviteToOrganization` mutation."""
input InviteToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String
  organizationId: UUID!
  username: String
}

"""The output of our `inviteToOrganization` mutation."""
type InviteToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  password: String!
  useAccessToken: Boolean
  username: String!
}

type LoginPayload {
  access_token: String
  token_type: String
  user: User!
}

type LogoutPayload {
  success: Boolean
}

"""All input for the `makeEmailPrimary` mutation."""
input MakeEmailPrimaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `makeEmailPrimary` mutation."""
type MakeEmailPrimaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Use this mutation to accept a friend request made to yourself."""
  acceptFriendRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AcceptFriendRequestInput!
  ): AcceptFriendRequestPayload

  """
  If someone invited you by your email address then you must include the code that was emailed to you, otherwise you may accept the invitation directly using the UUID. If successful, you will be a member of the organization.
  """
  acceptInvitationToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AcceptInvitationToOrganizationInput!
  ): AcceptInvitationToOrganizationPayload

  """Enter your old password and a new password to change your password."""
  changePassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangePasswordInput!
  ): ChangePasswordPayload

  """
  If you're certain you want to delete your account, use `requestAccountDeletion` to request an account deletion token, and then supply the token through this mutation to complete account deletion.
  """
  confirmAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmAccountDeletionInput!
  ): ConfirmAccountDeletionPayload

  """Creates a single `FriendRequest`."""
  createFriendRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFriendRequestInput!
  ): CreateFriendRequestPayload

  """
  An `Organization` is a great way of sharing access to resources between multiple users without compromising security. When you create an organization you will have the 'owner' and 'billing contact' roles. You may invite other users and redistribute these roles.
  """
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single `Pet`."""
  createPet(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePetInput!
  ): CreatePetPayload

  """Creates a single `PoiReview`."""
  createPoiReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePoiReviewInput!
  ): CreatePoiReviewPayload

  """Creates a single `PrivateDailyRecord`."""
  createPrivateDailyRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePrivateDailyRecordInput!
  ): CreatePrivateDailyRecordPayload

  """Creates a single `SharedDailyRecord`."""
  createSharedDailyRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSharedDailyRecordInput!
  ): CreateSharedDailyRecordPayload

  """Get a signed URL for uploading files. It will expire in 5 minutes."""
  createUploadUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUploadUrlInput!
  ): CreateUploadUrlPayload

  """Creates a single `UserEmail`."""
  createUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserEmailInput!
  ): CreateUserEmailPayload

  """Deletes a single `FriendRequest` using a unique key."""
  deleteFriendRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFriendRequestInput!
  ): DeleteFriendRequestPayload

  """
  Only the 'owner' may delete an organization. This operation cannot be undone, so be sure that it is what you intend.
  """
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Pet` using a unique key."""
  deletePet(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePetInput!
  ): DeletePetPayload

  """Deletes a single `PoiReview` using a unique key."""
  deletePoiReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePoiReviewInput!
  ): DeletePoiReviewPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserEdge` using a unique key."""
  deleteUserEdge(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEdgeInput!
  ): DeleteUserEdgePayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailInput!
  ): DeleteUserEmailPayload

  """
  If you've forgotten your password, give us one of your email addresses and we'll send you a reset token. Note this only works if you have added an email address!
  """
  forgotPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload

  """
  You may invite a user to your organization either by their username (only for verified users) or by their email. If you opt to invite by email then an email will be sent to this person containing a code that they need to accept the invitation. If the person doesn't already have an account they will be instructed to create one; their account need not have the email address that you invited listed as the secret code is confirmation enough.
  """
  inviteToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InviteToOrganizationInput!
  ): InviteToOrganizationPayload

  """
  Use this mutation to log in to your account; this login uses sessions so you do not need to take further action.
  """
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload

  """
  Use this mutation to logout from your account. Don't forget to clear the client state!
  """
  logout: LogoutPayload

  """
  Your primary email is where we'll notify of account events; other emails may be used for discovery or login. Use this when you're changing your email address.
  """
  makeEmailPrimary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeEmailPrimaryInput!
  ): MakeEmailPrimaryPayload

  """
  Use this mutation to create an account on our system. This may only be used if you are logged out.
  """
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload

  """
  The owner of an `Organization` may remove an `OrganizationMember` with this mutation.
  """
  removeFromOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveFromOrganizationInput!
  ): RemoveFromOrganizationPayload

  """Begin the account deletion flow by requesting the confirmation email"""
  requestAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RequestAccountDeletionInput!
  ): RequestAccountDeletionPayload

  """
  If you didn't receive the verification code for this email, we can resend it. We silently cap the rate of resends on the backend, so calls to this function may not result in another email being sent if it has been called recently.
  """
  resendEmailVerificationCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResendEmailVerificationCodeInput!
  ): ResendEmailVerificationCodePayload

  """
  After triggering forgotPassword, you'll be sent a reset token. Combine this with your user ID and a new password to reset your password.
  """
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload

  """
  The owner of an `Organization` may use this mutation to make any organization member the billing contact.
  """
  transferOrganizationBillingContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationBillingContactInput!
  ): TransferOrganizationBillingContactPayload

  """
  The owner of an `Organization` may use this mutation to transfer ownership to a different organization member. Take care, if you assign ownership to someone who cannot or will not access their account then you may need to contact support to have ownership reassigned.
  """
  transferOrganizationOwnership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationOwnershipInput!
  ): TransferOrganizationOwnershipPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """Updates a single `Pet` using a unique key and a patch."""
  updatePet(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePetInput!
  ): UpdatePetPayload

  """Updates a single `PoiReview` using a unique key and a patch."""
  updatePoiReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePoiReviewInput!
  ): UpdatePoiReviewPayload

  """Updates a single `PrivateDailyRecord` using a unique key and a patch."""
  updatePrivateDailyRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePrivateDailyRecordInput!
  ): UpdatePrivateDailyRecordPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `UserEdge` using a unique key and a patch."""
  updateUserEdge(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserEdgeInput!
  ): UpdateUserEdgePayload

  """Updates a single `UserEntry` using a unique key and a patch."""
  updateUserEntry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserEntryInput!
  ): UpdateUserEntryPayload

  """Upserts a single `FriendRequest`."""
  upsertFriendRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertFriendRequestInput!
  ): UpsertFriendRequestPayload

  """Upserts a batch of `FriendRequests`."""
  upsertFriendRequestBatch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertFriendRequestBatchInput!
  ): UpsertFriendRequestBatchPayload

  """Upserts a single `Pet`."""
  upsertPet(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertPetInput!
  ): UpsertPetPayload

  """Upserts a batch of `Pets`."""
  upsertPetBatch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertPetBatchInput!
  ): UpsertPetBatchPayload

  """Upserts a single `PoiReview`."""
  upsertPoiReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertPoiReviewInput!
  ): UpsertPoiReviewPayload

  """Upserts a batch of `PoiReviews`."""
  upsertPoiReviewBatch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertPoiReviewBatchInput!
  ): UpsertPoiReviewBatchPayload

  """Upserts a single `PrivateDailyRecord`."""
  upsertPrivateDailyRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertPrivateDailyRecordInput!
  ): UpsertPrivateDailyRecordPayload

  """Upserts a batch of `PrivateDailyRecords`."""
  upsertPrivateDailyRecordBatch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertPrivateDailyRecordBatchInput!
  ): UpsertPrivateDailyRecordBatchPayload

  """Upserts a single `SharedDailyRecord`."""
  upsertSharedDailyRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertSharedDailyRecordInput!
  ): UpsertSharedDailyRecordPayload

  """Upserts a batch of `SharedDailyRecords`."""
  upsertSharedDailyRecordBatch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertSharedDailyRecordBatchInput!
  ): UpsertSharedDailyRecordBatchPayload

  """Upserts a single `UserEmail`."""
  upsertUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertUserEmailInput!
  ): UpsertUserEmailPayload

  """Upserts a batch of `UserEmails`."""
  upsertUserEmailBatch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertUserEmailBatchInput!
  ): UpsertUserEmailBatchPayload

  """
  Once you have received a verification token for your email, you may call this mutation with that token to make your email verified.
  """
  verifyEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: VerifyEmailInput!
  ): VerifyEmailPayload
}

type Organization {
  createdAt: Datetime!
  currentUserIsBillingContact: Boolean
  currentUserIsOwner: Boolean
  id: UUID!
  name: String!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection!
  slug: String!
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `slug` field."""
  slug: String
}

type OrganizationMembership {
  createdAt: Datetime!
  id: UUID!
  isBillingContact: Boolean!
  isOwner: Boolean!

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization
  organizationId: UUID!

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
  userId: UUID!
}

"""
A condition to be used against `OrganizationMembership` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input OrganizationMembershipCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""A connection to a list of `OrganizationMembership` values."""
type OrganizationMembershipsConnection {
  """
  A list of edges which contains the `OrganizationMembership` and cursor to aid in pagination.
  """
  edges: [OrganizationMembershipsEdge!]!

  """A list of `OrganizationMembership` objects."""
  nodes: [OrganizationMembership!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganizationMembership` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OrganizationMembership` edge in the connection."""
type OrganizationMembershipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganizationMembership` at the end of the edge."""
  node: OrganizationMembership!
}

"""Methods to use when ordering `OrganizationMembership`."""
enum OrganizationMembershipsOrderBy {
  ID_ASC
  ID_DESC
  MEMBER_NAME_ASC
  MEMBER_NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
Represents an update to a `Organization`. Fields that are set will be updated.
"""
input OrganizationPatch {
  name: String
  slug: String
}

"""A connection to a list of `Organization` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """A list of `Organization` objects."""
  nodes: [Organization!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
}

"""A `Organization` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organization` at the end of the edge."""
  node: Organization!
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Pet {
  avatarUrl: String
  createdAt: Datetime!
  dob: Date!
  gender: PetGender!
  id: UUID!
  injections: JSON
  kind: PetKind!
  name: String!
  neutered: Boolean!

  """Reads and enables pagination through a set of `PrivateDailyRecord`."""
  privateDailyRecords(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PrivateDailyRecordCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PrivateDailyRecord`."""
    orderBy: [PrivateDailyRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PrivateDailyRecordsConnection!

  """Reads and enables pagination through a set of `SharedDailyRecord`."""
  sharedDailyRecords(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SharedDailyRecordCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SharedDailyRecord`."""
    orderBy: [SharedDailyRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SharedDailyRecordsConnection!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Pet`."""
  user: User
  userId: UUID!
  vaccinations: JSON
  weight: Weight
}

"""
A condition to be used against `Pet` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PetCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `kind` field."""
  kind: PetKind

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

enum PetGender {
  """female"""
  F

  """male"""
  M
}

"""An input for mutations affecting `Pet`"""
input PetInput {
  avatarUrl: String
  dob: Date!
  gender: PetGender!
  injections: JSON
  kind: PetKind!
  name: String!
  neutered: Boolean!
  userId: UUID!
  vaccinations: JSON
  weight: WeightInput
}

enum PetKind {
  """Dog"""
  DOG
}

"""Represents an update to a `Pet`. Fields that are set will be updated."""
input PetPatch {
  avatarUrl: String
  dob: Date
  gender: PetGender
  injections: JSON
  name: String
  neutered: Boolean
  vaccinations: JSON
  weight: WeightInput
}

"""A connection to a list of `Pet` values."""
type PetsConnection {
  """
  A list of edges which contains the `Pet` and cursor to aid in pagination.
  """
  edges: [PetsEdge!]!

  """A list of `Pet` objects."""
  nodes: [Pet!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Pet` you could get from the connection."""
  totalCount: Int!
}

"""A `Pet` edge in the connection."""
type PetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Pet` at the end of the edge."""
  node: Pet!
}

"""Methods to use when ordering `Pet`."""
enum PetsOrderBy {
  ID_ASC
  ID_DESC
  KIND_ASC
  KIND_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type Poi {
  createdAt: Datetime!
  id: UUID!
  kakaoId: String!

  """Reads and enables pagination through a set of `PoiReview`."""
  poiReviews(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PoiReviewCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PoiReview`."""
    orderBy: [PoiReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PoiReviewsConnection!
  rating: Float!
  ratingCount: Int!
  reviewCount: Int!
  totalRating: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `Poi` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PoiCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `kakaoId` field."""
  kakaoId: String
}

type PoiReview {
  comment: String
  createdAt: Datetime!
  id: UUID!
  kakaoId: String!

  """Reads a single `Poi` that is related to this `PoiReview`."""
  poi: Poi
  poiId: UUID
  rating: Int!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `PoiReview`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `PoiReview` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PoiReviewCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `kakaoId` field."""
  kakaoId: String

  """Checks for equality with the object’s `poiId` field."""
  poiId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""An input for mutations affecting `PoiReview`"""
input PoiReviewInput {
  comment: String
  id: UUID
  kakaoId: String!
  poiId: UUID
  rating: Int!
  userId: UUID!
}

"""
Represents an update to a `PoiReview`. Fields that are set will be updated.
"""
input PoiReviewPatch {
  comment: String
  id: UUID
  kakaoId: String
  poiId: UUID
  rating: Int
  userId: UUID
}

"""A connection to a list of `PoiReview` values."""
type PoiReviewsConnection {
  """
  A list of edges which contains the `PoiReview` and cursor to aid in pagination.
  """
  edges: [PoiReviewsEdge!]!

  """A list of `PoiReview` objects."""
  nodes: [PoiReview!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PoiReview` you could get from the connection."""
  totalCount: Int!
}

"""A `PoiReview` edge in the connection."""
type PoiReviewsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PoiReview` at the end of the edge."""
  node: PoiReview!
}

"""Methods to use when ordering `PoiReview`."""
enum PoiReviewsOrderBy {
  ID_ASC
  ID_DESC
  KAKAO_ID_ASC
  KAKAO_ID_DESC
  NATURAL
  POI_ID_ASC
  POI_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""A connection to a list of `Poi` values."""
type PoisConnection {
  """
  A list of edges which contains the `Poi` and cursor to aid in pagination.
  """
  edges: [PoisEdge!]!

  """A list of `Poi` objects."""
  nodes: [Poi!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Poi` you could get from the connection."""
  totalCount: Int!
}

"""A `Poi` edge in the connection."""
type PoisEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Poi` at the end of the edge."""
  node: Poi!
}

"""Methods to use when ordering `Poi`."""
enum PoisOrderBy {
  ID_ASC
  ID_DESC
  KAKAO_ID_ASC
  KAKAO_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type PrivateDailyRecord {
  bathroomComment: String
  bathroomStatus: DailyRecordStatus
  createdAt: Datetime!
  day: Date!
  dietComment: String
  dietStatus: DailyRecordStatus
  healthComment: String
  healthStatus: DailyRecordStatus

  """Reads a single `Pet` that is related to this `PrivateDailyRecord`."""
  pet: Pet
  petId: UUID!
  playComment: String
  playStatus: DailyRecordStatus
  sleepComment: String
  sleepStatus: DailyRecordStatus
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `PrivateDailyRecord`."""
  user: User
  userId: UUID!
  walkingComment: String
  walkingStatus: DailyRecordStatus
}

"""
A condition to be used against `PrivateDailyRecord` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PrivateDailyRecordCondition {
  """Checks for equality with the object’s `day` field."""
  day: Date

  """Checks for equality with the object’s `petId` field."""
  petId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""An input for mutations affecting `PrivateDailyRecord`"""
input PrivateDailyRecordInput {
  bathroomComment: String
  bathroomStatus: DailyRecordStatus
  day: Date!
  dietComment: String
  dietStatus: DailyRecordStatus
  healthComment: String
  healthStatus: DailyRecordStatus
  petId: UUID!
  playComment: String
  playStatus: DailyRecordStatus
  sleepComment: String
  sleepStatus: DailyRecordStatus
  userId: UUID!
  walkingComment: String
  walkingStatus: DailyRecordStatus
}

"""
Represents an update to a `PrivateDailyRecord`. Fields that are set will be updated.
"""
input PrivateDailyRecordPatch {
  bathroomComment: String
  bathroomStatus: DailyRecordStatus
  dietComment: String
  dietStatus: DailyRecordStatus
  healthComment: String
  healthStatus: DailyRecordStatus
  playComment: String
  playStatus: DailyRecordStatus
  sleepComment: String
  sleepStatus: DailyRecordStatus
  walkingComment: String
  walkingStatus: DailyRecordStatus
}

"""A connection to a list of `PrivateDailyRecord` values."""
type PrivateDailyRecordsConnection {
  """
  A list of edges which contains the `PrivateDailyRecord` and cursor to aid in pagination.
  """
  edges: [PrivateDailyRecordsEdge!]!

  """A list of `PrivateDailyRecord` objects."""
  nodes: [PrivateDailyRecord!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PrivateDailyRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""A `PrivateDailyRecord` edge in the connection."""
type PrivateDailyRecordsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PrivateDailyRecord` at the end of the edge."""
  node: PrivateDailyRecord!
}

"""Methods to use when ordering `PrivateDailyRecord`."""
enum PrivateDailyRecordsOrderBy {
  DAY_ASC
  DAY_DESC
  NATURAL
  PET_ID_ASC
  PET_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""The root query type which gives access points into the data universe."""
type Query {
  """The currently logged in user (or null if not logged in)."""
  currentUser: User
  currentUserSharedFriendIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserSharedFriendIdsConnection
  friendRequest(fromUserId: UUID!, toUserId: UUID!): FriendRequest

  """Reads and enables pagination through a set of `FriendRequest`."""
  friendRequests(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendRequestCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FriendRequest`."""
    orderBy: [FriendRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendRequestsConnection
  organization(id: UUID!): Organization
  organizationBySlug(slug: String!): Organization

  """
  Given an invitation UUID (and, if required, the code that was emailed to you), retrieves the `Organization` that you were invited to.
  """
  organizationForInvitation(code: String, invitationId: UUID!): Organization
  organizationMembership(id: UUID!): OrganizationMembership

  """Reads and enables pagination through a set of `Organization`."""
  organizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection
  pet(id: UUID!): Pet

  """Reads and enables pagination through a set of `Pet`."""
  pets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PetCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Pet`."""
    orderBy: [PetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PetsConnection
  poi(id: UUID!): Poi
  poiByKakaoId(kakaoId: String!): Poi
  poiReview(id: UUID!): PoiReview
  poiReviewByKakaoId(kakaoId: String!): PoiReview

  """Reads and enables pagination through a set of `PoiReview`."""
  poiReviews(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PoiReviewCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PoiReview`."""
    orderBy: [PoiReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PoiReviewsConnection

  """Reads and enables pagination through a set of `Poi`."""
  pois(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PoiCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Poi`."""
    orderBy: [PoisOrderBy!] = [PRIMARY_KEY_ASC]
  ): PoisConnection
  privateDailyRecord(day: Date!, petId: UUID!, userId: UUID!): PrivateDailyRecord

  """Reads and enables pagination through a set of `PrivateDailyRecord`."""
  privateDailyRecords(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PrivateDailyRecordCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PrivateDailyRecord`."""
    orderBy: [PrivateDailyRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PrivateDailyRecordsConnection
  sharedDailyRecord(day: Date!, petId: UUID!, userId: UUID!): SharedDailyRecord

  """Reads and enables pagination through a set of `SharedDailyRecord`."""
  sharedDailyRecords(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SharedDailyRecordCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SharedDailyRecord`."""
    orderBy: [SharedDailyRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SharedDailyRecordsConnection
  user(id: UUID!): User
  userAuthentication(id: UUID!): UserAuthentication
  userByUsername(username: String!): User
  userEdge(fromUserId: UUID!, toUserId: UUID!): UserEdge

  """Reads and enables pagination through a set of `UserEdge`."""
  userEdges(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEdgeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEdge`."""
    orderBy: [UserEdgesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEdgesConnection
  userEmail(id: UUID!): UserEmail

  """Reads and enables pagination through a set of `UserEntry`."""
  userEntries(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEntryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEntry`."""
    orderBy: [UserEntriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEntriesConnection
  userEntry(userId: UUID!): UserEntry
}

input RegisterInput {
  avatarUrl: String
  email: String!
  nickname: String
  password: String!
  username: String!
}

type RegisterPayload {
  user: User!
}

"""All input for the `removeFromOrganization` mutation."""
input RemoveFromOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `removeFromOrganization` mutation."""
type RemoveFromOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `requestAccountDeletion` mutation."""
input RequestAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `requestAccountDeletion` mutation."""
type RequestAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `resendEmailVerificationCode` mutation."""
input ResendEmailVerificationCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `resendEmailVerificationCode` mutation."""
type ResendEmailVerificationCodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  resetToken: String!
  userId: UUID!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

enum ShareLevel {
  """none"""
  NONE

  """summary"""
  SUMMARY
}

type SharedDailyRecord {
  completeStatusCount: Int!
  createdAt: Datetime!
  day: Date!
  dayStatus: DailyRecordDayStatus!
  everCompleted: Boolean!
  isComplete: Boolean!

  """Reads a single `Pet` that is related to this `SharedDailyRecord`."""
  pet: Pet
  petId: UUID!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `SharedDailyRecord`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `SharedDailyRecord` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SharedDailyRecordCondition {
  """Checks for equality with the object’s `day` field."""
  day: Date

  """Checks for equality with the object’s `petId` field."""
  petId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""An input for mutations affecting `SharedDailyRecord`"""
input SharedDailyRecordInput {
  day: Date!
  petId: UUID!
  userId: UUID!
}

"""A connection to a list of `SharedDailyRecord` values."""
type SharedDailyRecordsConnection {
  """
  A list of edges which contains the `SharedDailyRecord` and cursor to aid in pagination.
  """
  edges: [SharedDailyRecordsEdge!]!

  """A list of `SharedDailyRecord` objects."""
  nodes: [SharedDailyRecord!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SharedDailyRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SharedDailyRecord` edge in the connection."""
type SharedDailyRecordsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SharedDailyRecord` at the end of the edge."""
  node: SharedDailyRecord!
}

"""Methods to use when ordering `SharedDailyRecord`."""
enum SharedDailyRecordsOrderBy {
  DAY_ASC
  DAY_DESC
  NATURAL
  PET_ID_ASC
  PET_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  """Triggered when the logged in user's record is updated in some way."""
  currentUserUpdated: UserSubscriptionPayload
}

"""All input for the `transferOrganizationBillingContact` mutation."""
input TransferOrganizationBillingContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `transferOrganizationBillingContact` mutation."""
type TransferOrganizationBillingContactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `transferOrganizationOwnership` mutation."""
input TransferOrganizationOwnershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `transferOrganizationOwnership` mutation."""
type TransferOrganizationOwnershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateOrganization` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""The output of our update `Organization` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was updated by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePet` mutation."""
input UpdatePetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Pet` being updated.
  """
  patch: PetPatch!
}

"""The output of our update `Pet` mutation."""
type UpdatePetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pet` that was updated by this mutation."""
  pet: Pet

  """An edge for our `Pet`. May be used by Relay 1."""
  petEdge(
    """The method to use when ordering `Pet`."""
    orderBy: [PetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PetsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Pet`."""
  user: User
}

"""All input for the `updatePoiReview` mutation."""
input UpdatePoiReviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `PoiReview` being updated.
  """
  patch: PoiReviewPatch!
}

"""The output of our update `PoiReview` mutation."""
type UpdatePoiReviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Poi` that is related to this `PoiReview`."""
  poi: Poi

  """The `PoiReview` that was updated by this mutation."""
  poiReview: PoiReview

  """An edge for our `PoiReview`. May be used by Relay 1."""
  poiReviewEdge(
    """The method to use when ordering `PoiReview`."""
    orderBy: [PoiReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PoiReviewsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PoiReview`."""
  user: User
}

"""All input for the `updatePrivateDailyRecord` mutation."""
input UpdatePrivateDailyRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  day: Date!

  """
  An object where the defined keys will be set on the `PrivateDailyRecord` being updated.
  """
  patch: PrivateDailyRecordPatch!
  petId: UUID!
  userId: UUID!
}

"""The output of our update `PrivateDailyRecord` mutation."""
type UpdatePrivateDailyRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Pet` that is related to this `PrivateDailyRecord`."""
  pet: Pet

  """The `PrivateDailyRecord` that was updated by this mutation."""
  privateDailyRecord: PrivateDailyRecord

  """An edge for our `PrivateDailyRecord`. May be used by Relay 1."""
  privateDailyRecordEdge(
    """The method to use when ordering `PrivateDailyRecord`."""
    orderBy: [PrivateDailyRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PrivateDailyRecordsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PrivateDailyRecord`."""
  user: User
}

"""All input for the `updateUserEdge` mutation."""
input UpdateUserEdgeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  fromUserId: UUID!

  """
  An object where the defined keys will be set on the `UserEdge` being updated.
  """
  patch: UserEdgePatch!
  toUserId: UUID!
}

"""The output of our update `UserEdge` mutation."""
type UpdateUserEdgePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `User` that is related to this `UserEdge`."""
  fromUser: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEdge`."""
  toUser: User

  """The `UserEdge` that was updated by this mutation."""
  userEdge: UserEdge

  """An edge for our `UserEdge`. May be used by Relay 1."""
  userEdgeEdge(
    """The method to use when ordering `UserEdge`."""
    orderBy: [UserEdgesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEdgesEdge
}

"""All input for the `updateUserEntry` mutation."""
input UpdateUserEntryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserEntry` being updated.
  """
  patch: UserEntryPatch!
  userId: UUID!
}

"""The output of our update `UserEntry` mutation."""
type UpdateUserEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEntry`."""
  user: User

  """The `UserEntry` that was updated by this mutation."""
  userEntry: UserEntry

  """An edge for our `UserEntry`. May be used by Relay 1."""
  userEntryEdge(
    """The method to use when ordering `UserEntry`."""
    orderBy: [UserEntriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEntriesEdge
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the upsert `FriendRequest` batch mutation."""
input UpsertFriendRequestBatchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `FriendRequests` to be upserted by this mutation. Expects all records to conform to the structure of the first.
  """
  friendRequests: [FriendRequestInput]!
}

"""The output of our upsert `FriendRequest` batch mutation."""
type UpsertFriendRequestBatchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """An edge for our `FriendRequest`. May be used by Relay 1."""
  friendRequestEdge(
    """The method to use when ordering `FriendRequest`."""
    orderBy: [FriendRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendRequestsEdge

  """The `FriendRequests` that was upserted by this mutation."""
  friendRequests: [FriendRequest]

  """Reads a single `User` that is related to this `FriendRequest`."""
  fromUser: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `FriendRequest`."""
  toUser: User
}

"""All input for the upsert `FriendRequest` mutation."""
input UpsertFriendRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FriendRequest` to be upserted by this mutation."""
  friendRequest: FriendRequestInput!
}

"""The output of our upsert `FriendRequest` mutation."""
type UpsertFriendRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FriendRequest` that were upserted by this mutation."""
  friendRequest: FriendRequest

  """An edge for our `FriendRequest`. May be used by Relay 1."""
  friendRequestEdge(
    """The method to use when ordering `FriendRequest`."""
    orderBy: [FriendRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendRequestsEdge

  """Reads a single `User` that is related to this `FriendRequest`."""
  fromUser: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `FriendRequest`."""
  toUser: User
}

"""All input for the upsert `Pet` batch mutation."""
input UpsertPetBatchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Pets` to be upserted by this mutation. Expects all records to conform to the structure of the first.
  """
  pets: [PetInput]!
}

"""The output of our upsert `Pet` batch mutation."""
type UpsertPetBatchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """An edge for our `Pet`. May be used by Relay 1."""
  petEdge(
    """The method to use when ordering `Pet`."""
    orderBy: [PetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PetsEdge

  """The `Pets` that was upserted by this mutation."""
  pets: [Pet]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Pet`."""
  user: User
}

"""All input for the upsert `Pet` mutation."""
input UpsertPetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Pet` to be upserted by this mutation."""
  pet: PetInput!
}

"""The output of our upsert `Pet` mutation."""
type UpsertPetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pet` that were upserted by this mutation."""
  pet: Pet

  """An edge for our `Pet`. May be used by Relay 1."""
  petEdge(
    """The method to use when ordering `Pet`."""
    orderBy: [PetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PetsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Pet`."""
  user: User
}

"""All input for the upsert `PoiReview` batch mutation."""
input UpsertPoiReviewBatchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `PoiReviews` to be upserted by this mutation. Expects all records to conform to the structure of the first.
  """
  poiReviews: [PoiReviewInput]!
}

"""The output of our upsert `PoiReview` batch mutation."""
type UpsertPoiReviewBatchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Poi` that is related to this `PoiReview`."""
  poi: Poi

  """An edge for our `PoiReview`. May be used by Relay 1."""
  poiReviewEdge(
    """The method to use when ordering `PoiReview`."""
    orderBy: [PoiReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PoiReviewsEdge

  """The `PoiReviews` that was upserted by this mutation."""
  poiReviews: [PoiReview]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PoiReview`."""
  user: User
}

"""All input for the upsert `PoiReview` mutation."""
input UpsertPoiReviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PoiReview` to be upserted by this mutation."""
  poiReview: PoiReviewInput!
}

"""The output of our upsert `PoiReview` mutation."""
type UpsertPoiReviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Poi` that is related to this `PoiReview`."""
  poi: Poi

  """The `PoiReview` that were upserted by this mutation."""
  poiReview: PoiReview

  """An edge for our `PoiReview`. May be used by Relay 1."""
  poiReviewEdge(
    """The method to use when ordering `PoiReview`."""
    orderBy: [PoiReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PoiReviewsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PoiReview`."""
  user: User
}

"""All input for the upsert `PrivateDailyRecord` batch mutation."""
input UpsertPrivateDailyRecordBatchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `PrivateDailyRecords` to be upserted by this mutation. Expects all records to conform to the structure of the first.
  """
  privateDailyRecords: [PrivateDailyRecordInput]!
}

"""The output of our upsert `PrivateDailyRecord` batch mutation."""
type UpsertPrivateDailyRecordBatchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Pet` that is related to this `PrivateDailyRecord`."""
  pet: Pet

  """An edge for our `PrivateDailyRecord`. May be used by Relay 1."""
  privateDailyRecordEdge(
    """The method to use when ordering `PrivateDailyRecord`."""
    orderBy: [PrivateDailyRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PrivateDailyRecordsEdge

  """The `PrivateDailyRecords` that was upserted by this mutation."""
  privateDailyRecords: [PrivateDailyRecord]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PrivateDailyRecord`."""
  user: User
}

"""All input for the upsert `PrivateDailyRecord` mutation."""
input UpsertPrivateDailyRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PrivateDailyRecord` to be upserted by this mutation."""
  privateDailyRecord: PrivateDailyRecordInput!
}

"""The output of our upsert `PrivateDailyRecord` mutation."""
type UpsertPrivateDailyRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Pet` that is related to this `PrivateDailyRecord`."""
  pet: Pet

  """The `PrivateDailyRecord` that were upserted by this mutation."""
  privateDailyRecord: PrivateDailyRecord

  """An edge for our `PrivateDailyRecord`. May be used by Relay 1."""
  privateDailyRecordEdge(
    """The method to use when ordering `PrivateDailyRecord`."""
    orderBy: [PrivateDailyRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PrivateDailyRecordsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PrivateDailyRecord`."""
  user: User
}

"""All input for the upsert `SharedDailyRecord` batch mutation."""
input UpsertSharedDailyRecordBatchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `SharedDailyRecords` to be upserted by this mutation. Expects all records to conform to the structure of the first.
  """
  sharedDailyRecords: [SharedDailyRecordInput]!
}

"""The output of our upsert `SharedDailyRecord` batch mutation."""
type UpsertSharedDailyRecordBatchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Pet` that is related to this `SharedDailyRecord`."""
  pet: Pet

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SharedDailyRecord`. May be used by Relay 1."""
  sharedDailyRecordEdge(
    """The method to use when ordering `SharedDailyRecord`."""
    orderBy: [SharedDailyRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SharedDailyRecordsEdge

  """The `SharedDailyRecords` that was upserted by this mutation."""
  sharedDailyRecords: [SharedDailyRecord]

  """Reads a single `User` that is related to this `SharedDailyRecord`."""
  user: User
}

"""All input for the upsert `SharedDailyRecord` mutation."""
input UpsertSharedDailyRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SharedDailyRecord` to be upserted by this mutation."""
  sharedDailyRecord: SharedDailyRecordInput!
}

"""The output of our upsert `SharedDailyRecord` mutation."""
type UpsertSharedDailyRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Pet` that is related to this `SharedDailyRecord`."""
  pet: Pet

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SharedDailyRecord` that were upserted by this mutation."""
  sharedDailyRecord: SharedDailyRecord

  """An edge for our `SharedDailyRecord`. May be used by Relay 1."""
  sharedDailyRecordEdge(
    """The method to use when ordering `SharedDailyRecord`."""
    orderBy: [SharedDailyRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SharedDailyRecordsEdge

  """Reads a single `User` that is related to this `SharedDailyRecord`."""
  user: User
}

"""All input for the upsert `UserEmail` batch mutation."""
input UpsertUserEmailBatchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `UserEmails` to be upserted by this mutation. Expects all records to conform to the structure of the first.
  """
  userEmails: [UserEmailInput]!
}

"""The output of our upsert `UserEmail` batch mutation."""
type UpsertUserEmailBatchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge

  """The `UserEmails` that was upserted by this mutation."""
  userEmails: [UserEmail]
}

"""All input for the upsert `UserEmail` mutation."""
input UpsertUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserEmail` to be upserted by this mutation."""
  userEmail: UserEmailInput!
}

"""The output of our upsert `UserEmail` mutation."""
type UpsertUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that were upserted by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""A user who can log in to the application."""
type User {
  """Optional avatar URL."""
  avatarUrl: String
  createdAt: Datetime!

  """Reads and enables pagination through a set of `FriendRequest`."""
  friendRequestsByFromUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendRequestCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FriendRequest`."""
    orderBy: [FriendRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendRequestsConnection!

  """Reads and enables pagination through a set of `FriendRequest`."""
  friendRequestsByToUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendRequestCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FriendRequest`."""
    orderBy: [FriendRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendRequestsConnection!
  hasPassword: Boolean

  """Unique identifier for the user."""
  id: UUID!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  isVerified: Boolean!

  """Public-facing nickname (or pseudonym) of the user."""
  nickname: String

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection!

  """Reads and enables pagination through a set of `Pet`."""
  pets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PetCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Pet`."""
    orderBy: [PetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PetsConnection!

  """Reads and enables pagination through a set of `PoiReview`."""
  poiReviews(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PoiReviewCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PoiReview`."""
    orderBy: [PoiReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PoiReviewsConnection!

  """Reads and enables pagination through a set of `PrivateDailyRecord`."""
  privateDailyRecords(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PrivateDailyRecordCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PrivateDailyRecord`."""
    orderBy: [PrivateDailyRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PrivateDailyRecordsConnection!

  """Reads and enables pagination through a set of `SharedDailyRecord`."""
  sharedDailyRecords(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SharedDailyRecordCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SharedDailyRecord`."""
    orderBy: [SharedDailyRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SharedDailyRecordsConnection!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthenticationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!]
  ): [UserAuthentication!]!

  """Reads and enables pagination through a set of `UserEdge`."""
  userEdgesByFromUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEdgeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEdge`."""
    orderBy: [UserEdgesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEdgesConnection!

  """Reads and enables pagination through a set of `UserEdge`."""
  userEdgesByToUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEdgeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEdge`."""
    orderBy: [UserEdgesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEdgesConnection!

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsConnection!

  """Reads and enables pagination through a set of `UserEntry`."""
  userEntries(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEntryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEntry`."""
    orderBy: [UserEntriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEntriesConnection! @deprecated(reason: "Please use userEntry instead")

  """Reads a single `UserEntry` that is related to this `User`."""
  userEntry: UserEntry

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserAuthentication {
  createdAt: Datetime!
  id: UUID!

  """A unique identifier for the user within the login service."""
  identifier: String!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserAuthentication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserAuthenticationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `service` field."""
  service: String

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""Methods to use when ordering `UserAuthentication`."""
enum UserAuthenticationsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SERVICE_ASC
  SERVICE_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type UserEdge {
  createdAt: Datetime!
  dailyRecordsShared: ShareLevel!

  """Reads a single `User` that is related to this `UserEdge`."""
  fromUser: User
  fromUserId: UUID!

  """Reads a single `User` that is related to this `UserEdge`."""
  toUser: User
  toUserId: UUID!
  updatedAt: Datetime!
}

"""
A condition to be used against `UserEdge` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEdgeCondition {
  """Checks for equality with the object’s `dailyRecordsShared` field."""
  dailyRecordsShared: ShareLevel

  """Checks for equality with the object’s `fromUserId` field."""
  fromUserId: UUID

  """Checks for equality with the object’s `toUserId` field."""
  toUserId: UUID
}

"""
Represents an update to a `UserEdge`. Fields that are set will be updated.
"""
input UserEdgePatch {
  dailyRecordsShared: ShareLevel
}

"""A connection to a list of `UserEdge` values."""
type UserEdgesConnection {
  """
  A list of edges which contains the `UserEdge` and cursor to aid in pagination.
  """
  edges: [UserEdgesEdge!]!

  """A list of `UserEdge` objects."""
  nodes: [UserEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserEdge` you could get from the connection."""
  totalCount: Int!
}

"""A `UserEdge` edge in the connection."""
type UserEdgesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEdge` at the end of the edge."""
  node: UserEdge!
}

"""Methods to use when ordering `UserEdge`."""
enum UserEdgesOrderBy {
  DAILY_RECORDS_SHARED_ASC
  DAILY_RECORDS_SHARED_DESC
  FROM_USER_ID_ASC
  FROM_USER_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TO_USER_ID_ASC
  TO_USER_ID_DESC
}

"""Information about a user's email address."""
type UserEmail {
  createdAt: Datetime!

  """The users email address, in `a@b.c` format."""
  email: String!
  id: UUID!
  isPrimary: Boolean!

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEmailCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isPrimary` field."""
  isPrimary: Boolean

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""An input for mutations affecting `UserEmail`"""
input UserEmailInput {
  """The users email address, in `a@b.c` format."""
  email: String!
}

"""A connection to a list of `UserEmail` values."""
type UserEmailsConnection {
  """
  A list of edges which contains the `UserEmail` and cursor to aid in pagination.
  """
  edges: [UserEmailsEdge!]!

  """A list of `UserEmail` objects."""
  nodes: [UserEmail!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserEmail` you could get from the connection."""
  totalCount: Int!
}

"""A `UserEmail` edge in the connection."""
type UserEmailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEmail` at the end of the edge."""
  node: UserEmail!
}

"""Methods to use when ordering `UserEmail`."""
enum UserEmailsOrderBy {
  ID_ASC
  ID_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""A connection to a list of `UserEntry` values."""
type UserEntriesConnection {
  """
  A list of edges which contains the `UserEntry` and cursor to aid in pagination.
  """
  edges: [UserEntriesEdge!]!

  """A list of `UserEntry` objects."""
  nodes: [UserEntry!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserEntry` you could get from the connection."""
  totalCount: Int!
}

"""A `UserEntry` edge in the connection."""
type UserEntriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEntry` at the end of the edge."""
  node: UserEntry!
}

"""Methods to use when ordering `UserEntry`."""
enum UserEntriesOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type UserEntry {
  address: JSON
  agreedToTerms: Boolean!
  createdAt: Datetime!
  name: String
  pupcleBalance: Int!
  receiveFriendRequestNotifications: Boolean!
  receiveGeneralNotifications: Boolean!
  receiveInviteNotifications: Boolean!
  receiveMarketingNotifications: Boolean!
  receivePersonalNotifications: Boolean!
  totalPupclesEarned: Int!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserEntry`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserEntry` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEntryCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
Represents an update to a `UserEntry`. Fields that are set will be updated.
"""
input UserEntryPatch {
  address: JSON
  agreedToTerms: Boolean
  name: String
  receiveFriendRequestNotifications: Boolean
  receiveGeneralNotifications: Boolean
  receiveInviteNotifications: Boolean
  receiveMarketingNotifications: Boolean
  receivePersonalNotifications: Boolean
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Optional avatar URL."""
  avatarUrl: String

  """Public-facing nickname (or pseudonym) of the user."""
  nickname: String

  """Public-facing username (or 'handle') of the user."""
  username: String
}

type UserSubscriptionPayload {
  event: String
  user: User
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
}

"""All input for the `verifyEmail` mutation."""
input VerifyEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
  userEmailId: UUID!
}

"""The output of our `verifyEmail` mutation."""
type VerifyEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

type Weight {
  unit: WeightUnit
  value: Float
}

"""An input for mutations affecting `Weight`"""
input WeightInput {
  unit: WeightUnit
  value: Float
}

enum WeightUnit {
  KG
  LBS
}
